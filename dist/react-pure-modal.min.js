(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("react")) : factory(root["React"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_12__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _reactPureModal = __webpack_require__(1);

	var _reactPureModal2 = _interopRequireDefault(_reactPureModal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _reactPureModal2.default;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _keymage = __webpack_require__(2);

	var _keymage2 = _interopRequireDefault(_keymage);

	var _uniqueId = __webpack_require__(9);

	var _uniqueId2 = _interopRequireDefault(_uniqueId);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PureModal = function (_React$Component) {
	  _inherits(PureModal, _React$Component);

	  function PureModal(props) {
	    _classCallCheck(this, PureModal);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PureModal).call(this, props));

	    _this.isOpen = props.isOpen || false;
	    _this.close = _this.close.bind(_this);
	    _this.open = _this.open.bind(_this);
	    _this.handleBackdropClick = _this.handleBackdropClick.bind(_this);
	    _this.scope = (0, _uniqueId2.default)('modal-');
	    return _this;
	  }

	  _createClass(PureModal, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _keymage2.default)(this.scope, 'esc', this.close);

	      if (this.props.isOpen) {
	        this.setModalContext();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.isOpen = nextProps.isOpen;
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate() {
	      if (this.isOpen) {
	        if (this.props.isOpen !== this.isOpen) {
	          this.setModalContext();
	        }
	      } else {
	        this.unsetModalContext();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _keymage2.default.unbind(this.scope, 'esc', this.close);
	      this.unsetModalContext();
	    }
	  }, {
	    key: 'setModalContext',
	    value: function setModalContext() {
	      document.body.classList.add('body-modal-fix');
	      _keymage2.default.pushScope(this.scope);
	    }
	  }, {
	    key: 'unsetModalContext',
	    value: function unsetModalContext() {
	      document.body.classList.remove('body-modal-fix');
	      _keymage2.default.popScope();
	    }
	  }, {
	    key: 'open',
	    value: function open(event) {
	      if (event) {
	        event.stopPropagation();
	        event.preventDefault();
	      }
	      if (!this.isOpen) {
	        this.isOpen = true;
	        this.forceUpdate();
	      }
	    }
	  }, {
	    key: 'close',
	    value: function close(event) {
	      if (event) {
	        event.stopPropagation();
	        event.preventDefault();
	      }

	      if (this.isOpen) {
	        if (this.props.onClose) {
	          this.isOpen = !this.props.onClose();
	        } else {
	          this.isOpen = false;
	        }
	        this.forceUpdate();
	      }
	    }
	  }, {
	    key: 'handleBackdropClick',
	    value: function handleBackdropClick(event) {
	      if (event) {
	        if (!event.target.classList.contains('pure-modal-backdrop')) {
	          return;
	        }
	        event.stopPropagation();
	        event.preventDefault();
	      }
	      this.close();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (!this.isOpen) {
	        return null;
	      }

	      var _props = this.props;
	      var children = _props.children;
	      var replace = _props.replace;
	      var _props$className = _props.className;
	      var className = _props$className === undefined ? '' : _props$className;
	      var header = _props.header;
	      var footer = _props.footer;


	      return _react2.default.createElement(
	        'div',
	        { className: 'pure-modal-backdrop', onClick: this.handleBackdropClick },
	        _react2.default.createElement(
	          'div',
	          { className: 'pure-modal ' + className },
	          replace ? children : _react2.default.createElement(
	            'div',
	            { className: 'panel panel-default' },
	            _react2.default.createElement(
	              'div',
	              { className: 'panel-heading' },
	              header && _react2.default.createElement(
	                'h3',
	                { className: 'panel-title' },
	                header
	              ),
	              _react2.default.createElement(
	                'div',
	                { onClick: this.close, className: 'close' },
	                'Ã—'
	              )
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'panel-body scrollable' },
	              children
	            ),
	            footer && _react2.default.createElement(
	              'div',
	              { className: 'panel-footer', ref: 'footer' },
	              footer
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return PureModal;
	}(_react2.default.Component);

	PureModal.defaultProps = {
	  mode: 'modal',
	  replace: false
	};

	PureModal.propTypes = {
	  mode: _react2.default.PropTypes.oneOf(['modal', 'tooltip']),
	  replace: _react2.default.PropTypes.bool,
	  children: _react2.default.PropTypes.node,
	  isOpen: _react2.default.PropTypes.bool,
	  onClose: _react2.default.PropTypes.func,
	  className: _react2.default.PropTypes.string,
	  header: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.node, _react2.default.PropTypes.string]),
	  footer: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.node, _react2.default.PropTypes.string])
	};

	exports.default = PureModal;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/// keymage.js - Javascript keyboard bindings handling
	/// http://github.com/piranha/keymage
	///
	/// (c) 2012-2016 Alexander Solovyov under terms of ISC License

	(function(define, undefined) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    var VERSION = '1.1.3';
	    var isOsx = typeof navigator !== 'undefined' &&
	        ~navigator.userAgent.indexOf('Mac OS X');

	    // Defining all keys
	    var MODPROPS = ['shiftKey', 'ctrlKey', 'altKey', 'metaKey'];
	    var MODS = {
	        'shift': 'shift',
	        'ctrl': 'ctrl', 'control': 'ctrl',
	        'alt': 'alt', 'option': 'alt',
	        'win': 'meta', 'cmd': 'meta', 'super': 'meta',
	                          'meta': 'meta',
	        // default modifier for os x is cmd and for others is ctrl
	        'defmod':  isOsx ? 'meta' : 'ctrl'
	        };
	    var MODORDER = ['shift', 'ctrl', 'alt', 'meta'];
	    var MODNUMS = [16, 17, 18, 91];

	    var KEYS = {
	        'backspace': 8,
	        'tab': 9,
	        'enter': 13, 'return': 13,
	        'pause': 19,
	        'caps': 20, 'capslock': 20,
	        'escape': 27, 'esc': 27,
	        'space': 32,
	        'pgup': 33, 'pageup': 33,
	        'pgdown': 34, 'pagedown': 34,
	        'end': 35,
	        'home': 36,
	        'ins': 45, 'insert': 45,
	        'del': 46, 'delete': 46,

	        'left': 37,
	        'up': 38,
	        'right': 39,
	        'down': 40,

	        '*': 106,
	        '+': 107, 'plus': 107,
	        'minus': 109,
	        ';': 186,
	        '=': 187,
	        ',': 188,
	        '-': 189,
	        '.': 190,
	        '/': 191,
	        '`': 192,
	        '[': 219,
	        '\\': 220,
	        ']': 221,
	        "'": 222
	    };

	    var i;
	    // numpad
	    for (i = 0; i < 10; i++) {
	        KEYS['num-' + i] = i + 95;
	    }
	    // top row 0-9
	    for (i = 0; i < 10; i++) {
	        KEYS[i.toString()] = i + 48;
	    }
	    // f1-f24
	    for (i = 1; i < 25; i++) {
	        KEYS['f' + i] = i + 111;
	    }
	    // alphabet
	    for (i = 65; i < 91; i++) {
	        KEYS[String.fromCharCode(i).toLowerCase()] = i;
	    }

	    // Reverse key codes
	    var KEYREV = {};
	    for (var k in KEYS) {
	        var val = KEYS[k];
	        if (!KEYREV[val] || KEYREV[val].length < k.length) {
	            KEYREV[val] = k;
	        }
	    }

	    // -----------------------
	    // Actual work is done here

	    var currentScope = '';
	    var allChains = {};

	    function parseKeyString(keystring) {
	        var bits = keystring.split(/-(?!$)/);
	        var button = bits[bits.length - 1];
	        var key = {code: KEYS[button]};

	        if (!key.code) {
	            throw 'Unknown key "' + button + '" in keystring "' +
	                keystring + '"';
	        }

	        var mod;
	        for (var i = 0; i < bits.length - 1; i++) {
	            button = bits[i];
	            mod = MODS[button];
	            if (!mod) {
	                    throw 'Unknown modifier "' + button + '" in keystring "' +
	                        keystring + '"';
	            }
	            key[mod] = true;
	        }

	        return key;
	    }

	    function stringifyKey(key) {
	        var s = '';
	        for (var i = 0; i < MODORDER.length; i++) {
	            if (key[MODORDER[i]]) {
	                s += MODORDER[i] + '-';
	            }
	        }
	        s += KEYREV[key.code];
	        return s;
	    }

	    function normalizeKeyChain(keychainString) {
	        var keychain = [];
	        var keys = keychainString.split(' ');

	        for (var i = 0; i < keys.length; i++) {
	            var key = parseKeyString(keys[i]);
	            key = stringifyKey(key);
	            keychain.push(key);
	        }

	        keychain.original = keychainString;
	        return keychain;
	    }

	    function eventKeyString(e) {
	        var key = {code: e.keyCode};
	        for (var i = 0; i < MODPROPS.length; i++) {
	            var mod = MODPROPS[i];
	            if (e[mod]) {
	                key[mod.slice(0, mod.length - 3)] = true;
	            }
	        }
	        return stringifyKey(key);
	    }

	    function getNestedChains(chains, scope) {
	        for (var i = 0; i < scope.length; i++) {
	            var bit = scope[i];

	            if (bit) {
	                chains = chains[bit];
	            }

	            if (!chains) {
	                break;
	            }
	        }
	        return chains;
	    }

	    var sequence = [];
	    function dispatch(e) {
	        // Skip all modifiers
	        if (~MODNUMS.indexOf(e.keyCode)) {
	            return;
	        }

	        var seq = sequence.slice();
	        seq.push(eventKeyString(e));
	        var scope = currentScope.split('.');
	        var matched, chains, key;

	        for (var i = scope.length; i >= 0; i--) {
	            chains = getNestedChains(allChains, scope.slice(0, i));
	            if (!chains) {
	                continue;
	            }
	            matched = true;
	            for (var j = 0; j < seq.length; j++) {
	                key = seq[j];
	                if (!chains[key]) {
	                    matched = false;
	                    break;
	                }
	                chains = chains[key];
	            }

	            if (matched) {
	                break;
	            }
	        }

	        var definitionScope = scope.slice(0, i).join('.');
	        var preventDefault = chains.preventDefault;

	        // partial match, save the sequence
	        if (matched && !chains.handlers) {
	            sequence = seq;
	            if (preventDefault) {
	                e.preventDefault();
	            }
	            return;
	        }

	        if (matched) {
	            for (i = 0; i < chains.handlers.length; i++) {
	                var handler = chains.handlers[i];
	                var options = handler._keymage;

	                var res = handler.call(options.context, e, {
	                    shortcut: options.original,
	                    scope: currentScope,
	                    definitionScope: definitionScope
	                });

	                if (res === false || preventDefault) {
	                    e.preventDefault();
	                }
	            }
	        }

	        // either matched or not, drop the sequence
	        sequence = [];
	    }

	    function getHandlers(scope, keychain, fn) {
	        var bits = scope.split('.');
	        var chains = allChains;
	        bits = bits.concat(keychain);

	        for (var i = 0, l = bits.length; i < l; i++) {
	            var bit = bits[i];
	            if (!bit) continue;

	            chains = chains[bit] || (chains[bit] = {});
	            if (fn && fn._keymage.preventDefault) {
	                chains.preventDefault = true;
	            }

	            if (i === l - 1) {
	                var handlers = chains.handlers || (chains.handlers = []);
	                return handlers;
	            }
	        }
	    }

	    function assignKey(scope, keychain, fn) {
	        var handlers = getHandlers(scope, keychain, fn);
	        handlers.push(fn);
	    }

	    function unassignKey(scope, keychain, fn) {
	        var handlers = getHandlers(scope, keychain);
	        var idx = handlers.indexOf(fn);
	        if (~idx) {
	            handlers.splice(idx, 1);
	        }
	    }

	    function parsed(scope, keychain, fn, options) {
	        if (keychain === undefined && fn === undefined) {
	            return function(keychain, fn) {
	                return keymage(scope, keychain, fn);
	            };
	        }

	        if (typeof keychain === 'function') {
	            options = fn;
	            fn = keychain;
	            keychain = scope;
	            scope = '';
	        }

	        var normalized = normalizeKeyChain(keychain);

	        return [scope, normalized, fn, options];
	    }

	    // optional arguments: scope, options.
	    function keymage(scope, keychain, fn, options) {
	        var args = parsed(scope, keychain, fn, options);
	        fn = args[2];
	        options = args[3];
	        fn._keymage = options || {};
	        fn._keymage.original = keychain;
	        assignKey.apply(null, args);

	        return function () {
	            unassignKey.apply(null, args);
	        };
	    }

	    keymage.unbind = function(scope, keychain, fn) {
	        var args = parsed(scope, keychain, fn);
	        unassignKey.apply(null, args);
	    };

	    keymage.parse = parseKeyString;
	    keymage.stringify = stringifyKey;

	    keymage.bindings = allChains;

	    keymage.setScope = function(scope) {
	        currentScope = scope ? scope : '';
	    };

	    keymage.getScope = function() { return currentScope; };

	    keymage.pushScope = function(scope) {
	        currentScope = (currentScope ? currentScope + '.' : '') + scope;
	        return currentScope;
	    };

	    keymage.popScope = function(scope) {
	        var i;

	        if (!scope) {
	            i = currentScope.lastIndexOf('.');
	            scope = currentScope.slice(i + 1);
	            currentScope = i == -1 ? '' : currentScope.slice(0, i);
	            return scope;
	        }

	        currentScope = currentScope.replace(
	            new RegExp('(^|\\.)' + scope + '(\\.|$).*'), '');
	        return scope;
	    };

	    keymage.version = VERSION;

	    window.addEventListener('keydown', dispatch, false);

	    return keymage;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(10));


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(5);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}

	module.exports = checkGlobal;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {var checkGlobal = __webpack_require__(4);

	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};

	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;

	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal ||
	  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	    freeSelf || thisGlobal || Function('return this')();

	module.exports = root;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module), (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(6);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(3),
	    isSymbol = __webpack_require__(7);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = Symbol ? symbolProto.toString : undefined;

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (value == null) {
	    return '';
	  }
	  if (isSymbol(value)) {
	    return Symbol ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toString;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(8);

	/** Used to generate unique IDs. */
	var idCounter = 0;

	/**
	 * Generates a unique ID. If `prefix` is given the ID is appended to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Util
	 * @param {string} [prefix=''] The value to prefix the ID with.
	 * @returns {string} Returns the unique ID.
	 * @example
	 *
	 * _.uniqueId('contact_');
	 * // => 'contact_104'
	 *
	 * _.uniqueId();
	 * // => '105'
	 */
	function uniqueId(prefix) {
	  var id = ++idCounter;
	  return toString(prefix) + id;
	}

	module.exports = uniqueId;


/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_12__;

/***/ }
/******/ ])
});
;